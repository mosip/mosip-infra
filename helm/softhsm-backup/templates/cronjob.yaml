apiVersion: {{ include "common.capabilities.cronjob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ template "softhsmbackup.cronjob" $ }}
  namespace: {{ $.Release.Namespace }}
  annotations:
    {{- if $.Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if $.Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}

spec:
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1  # remove jobs which are successfully executed
  failedJobsHistoryLimit: 1      # except 1 recent failed job, remove jobs which are not successfully executed
  #schedule: '*/3 * * * *' # cron spec of time, here, 8 o'clock
  schedule: {{ $.Values.crontime }}
  jobTemplate:
    spec:
      backoffLimit: 0 # this has very low chance of failing, as all this does
                      # is prompt kubernetes to schedule new replica set for
      # the deployment
      # activeDeadlineSeconds: 600 # timeout, makes most sense with
      # "waiting for rollout" variant specified below
      template:
        spec:
          # account configured above
          restartPolicy: Never
          serviceAccountName: {{ template "softhsmbackup.serviceAccountName" $ }}
          initContainers:
              {{- if $.Values.enable_insecure }}
              {{- include "common.tplvalues.render" (dict "value" $.Values.initContainers "context" $) | nindent 12 }}
              {{- end }}
          containers:
          - name: {{ template "softhsmbackup.serviceAccountName" $ }}
            image: {{ template "softhsmbackup.image" $ }}
            imagePullPolicy: {{ $.Values.image.pullPolicy }}
            {{- if $.Values.lifecycleHooks }}
            lifecycle: {{- include "common.tpvalues.render" (dict "value" $.Values.lifecycleHooks "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.containerSecurityContext.enabled }}
            securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            {{- end }}
            {{- if $.Values.command }}
            command: {{- include "common.tplvalues.render" (dict "value" $.Values.command "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.args }}
            args: {{- include "common.tplvalues.render" (dict "value" $.Values.args "context" $) | nindent 12 }}
            {{- end }}
            env:
              - name: container_user
                value: {{ $.Values.containerSecurityContext.runAsUser }}
              {{- if $.Values.extraEnvVars }}
              {{- include "common.tpvalues.render" (dict "value" $.Values.extraEnvVars "context" $) | nindent 12 }}
              {{- end }}
            envFrom:
              {{- if $.Values.extraEnvVarsCM }}
                {{- range $.Values.extraEnvVarsCM }}
                  - configMapRef:
                        name: {{ . }}
                {{- end }}
                {{- end }}
                {{- if $.Values.extraEnvVarsSecret }}
                {{- range $.Values.extraEnvVarsSecret }}
                  - secretRef:
                        name: {{ . }}
                {{- end }}
                {{- end }}

