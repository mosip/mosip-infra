---
# PostgreSQL Setup with Secure Password Generation - Production Grade
# Enhanced playbook with secure password generation and Kubernetes secret creation

- name: PostgreSQL Secure Setup
  hosts: postgresql_servers
  become: yes
  vars:
    # Default configuration - easily overridable
    postgres_version: "{{ postgresql_version | default('15') }}"
    postgres_port: "{{ postgresql_port | default('5433') }}"
    postgres_device: "{{ storage_device | default('/dev/nvme2n1') }}"
    postgres_mount: "{{ mount_point | default('/srv/postgres') }}"
    postgres_data_dir: "{{ postgres_mount }}/postgresql/{{ postgres_version }}/main"
    postgres_old_dir: "/var/lib/postgresql/{{ postgres_version }}/main"
    postgres_config_dir: "/etc/postgresql/{{ postgres_version }}/main"
    postgres_network_cidr: "{{ network_cidr | default('10.0.0.0/8') }}"
    postgres_namespace: "{{ kubernetes_namespace | default('postgres') }}"
    postgres_secret_name: "{{ secret_name | default('postgres-postgresql') }}"
    # Use localhost for local operations, but actual IP for ConfigMap
    postgres_local_host: "{{ local_connection_host | default('localhost') }}"
    postgres_external_host: "{{ ansible_host }}"
    
  tasks:
    # Prerequisites Check
    - name: Check if device exists
      stat:
        path: "{{ postgres_device }}"
      register: device_check
      failed_when: not device_check.stat.exists
      
    # Secure Password Generation
    - name: Generate secure PostgreSQL password
      shell: |
        python3 -c "
        import random
        import string
        uppercase = ''.join(random.choices(string.ascii_uppercase, k=4))
        lowercase = ''.join(random.choices(string.ascii_lowercase, k=4))
        digits = ''.join(random.choices(string.digits, k=4))
        special = ''.join(random.choices('!@#$%^&*', k=4))
        password = list(uppercase + lowercase + digits + special)
        random.shuffle(password)
        print(''.join(password))
        "
      register: generated_password
      no_log: false
      
    - name: Set password fact
      set_fact:
        postgres_password: "{{ generated_password.stdout }}"
      no_log: false
      
    - name: Validate password complexity
      assert:
        that:
          - postgres_password | length == 16
          - postgres_password | regex_search('[A-Z]')
          - postgres_password | regex_search('[a-z]')
          - postgres_password | regex_search('[0-9]')
          - postgres_password | regex_search('[!@#$%^&*]')
        fail_msg: "Generated password does not meet complexity requirements"
        success_msg: "Password meets security requirements"
      no_log: false
      
    # Store password in a fact to ensure consistency throughout playbook
    - name: Store password in host facts for consistency
      set_fact:
        postgres_password: "{{ postgres_password }}"
      no_log: false
      
    # Storage Setup
    - name: Check if device is already mounted
      command: mountpoint -q {{ postgres_mount }}
      register: mount_check
      failed_when: false
      changed_when: false
      
    - name: Format device if not mounted
      filesystem:
        fstype: xfs
        dev: "{{ postgres_device }}"
        force: no
      when: mount_check.rc != 0
      
    - name: Create mount point and mount device
      mount:
        path: "{{ postgres_mount }}"
        src: "{{ postgres_device }}"
        fstype: xfs
        opts: defaults,noatime
        state: mounted
        
    # Add PostgreSQL repository
    - name: Install required packages for repository
      apt:
        name:
          - wget
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-bcrypt
          - python3-psycopg2
        state: present
        update_cache: yes
        
    - name: Get Ubuntu codename
      command: lsb_release -cs
      register: ubuntu_codename
      changed_when: false
      
    - name: Add PostgreSQL signing key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
        
    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ubuntu_codename.stdout }}-pgdg main"
        state: present
        
    - name: Update package cache after adding PostgreSQL repo
      apt:
        update_cache: yes
        
    # Install PostgreSQL
    - name: Install PostgreSQL packages
      apt:
        name:
          - "postgresql-{{ postgres_version }}"
          - "postgresql-client-{{ postgres_version }}"
        state: present
        
    - name: Stop PostgreSQL for data migration
      systemd:
        name: postgresql
        state: stopped
        
    # Data Migration
    - name: Check if old data directory exists
      stat:
        path: "{{ postgres_old_dir }}/PG_VERSION"
      register: old_data_exists
      
    - name: Check if new data directory is empty
      find:
        paths: "{{ postgres_data_dir }}"
        file_type: any
      register: new_data_check
      failed_when: false
      
    - name: Create new data directory
      file:
        path: "{{ postgres_data_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'
        recurse: yes
        
    - name: Copy data to new location
      shell: |
        sudo -u postgres cp -a {{ postgres_old_dir }}/* {{ postgres_data_dir }}/
        sudo -u postgres cp -a {{ postgres_old_dir }}/.[^.]* {{ postgres_data_dir }}/ 2>/dev/null || true
      when: 
        - old_data_exists.stat.exists
        - new_data_check.matched == 0
        
    - name: Fix permissions on data directory
      file:
        path: "{{ postgres_data_dir }}"
        owner: postgres
        group: postgres
        mode: '0700'
        recurse: yes
        
    # Configuration
    - name: Configure PostgreSQL settings
      lineinfile:
        path: "{{ postgres_config_dir }}/postgresql.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?data_directory\s*=', line: "data_directory = '{{ postgres_data_dir }}'" }
        - { regexp: '^#?port\s*=', line: "port = {{ postgres_port }}" }
        - { regexp: '^#?listen_addresses\s*=', line: "listen_addresses = '*'" }
        - { regexp: '^#?max_connections\s*=', line: "max_connections = 1000" }
      notify: restart postgresql
      
    - name: Configure pg_hba.conf for access
      copy:
        dest: "{{ postgres_config_dir }}/pg_hba.conf"
        content: |
          # Database administrative login by Unix domain socket
          local   all             postgres                                peer

          # "local" is for Unix domain socket connections only
          local   all             all                                     peer

          # IPv4 local connections:
          host    all             all             0.0.0.0/0               md5

          # IPv6 local connections:
          host    all             all             ::1/128                 md5

          # Allow replication connections from localhost, by a user with the
          # replication privilege.
          local   replication     all                                     peer
          host    replication     all             127.0.0.1/32            md5
          host    replication     all             ::1/128                 md5
        owner: postgres
        group: postgres
        mode: '0640'
        backup: yes
      notify: restart postgresql
      
    # Start Service
    - name: Start and enable PostgreSQL
      systemd:
        name: postgresql
        state: started
        enabled: yes
        
    # Wait for PostgreSQL to be ready
    - name: Wait for PostgreSQL to be ready
      wait_for:
        port: "{{ postgres_port }}"
        timeout: 30
        
    # Secure Password Setup
    - name: Set PostgreSQL postgres user password using SQL
      shell: |
        sudo -u postgres psql -p {{ postgres_port }} -c "ALTER USER postgres PASSWORD '{{ postgres_password }}';"
      no_log: false
      
    # Reload PostgreSQL configuration
    - name: Reload PostgreSQL configuration
      shell: sudo -u postgres psql -p {{ postgres_port }} -c "SELECT pg_reload_conf();"
      
    # Wait a bit for configuration to take effect
    - name: Wait for PostgreSQL to be fully ready after password change
      wait_for:
        timeout: 5
        
    - name: Test local connection first (using peer authentication)
      shell: |
        sudo -u postgres psql -p {{ postgres_port }} -c "SELECT 'Local peer authentication works' as status;"
      register: peer_test
      
    - name: Test PostgreSQL connection with new password
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h {{ postgres_external_host }} -p {{ postgres_port }} -U postgres -c "SELECT version();" 
      register: pg_test
      no_log: false
      retries: 3
      delay: 2
      until: pg_test.rc == 0
      
    # Verify password consistency before creating Kubernetes files
    - name: Verify password consistency by testing connection again
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h {{ postgres_external_host }} -p {{ postgres_port }} -U postgres -c "SELECT 'Password verification successful' as status;" 
      register: password_verification
      no_log: false
      failed_when: password_verification.rc != 0
      retries: 3
      delay: 2
      until: password_verification.rc == 0
      
    # Create Kubernetes Secret on Local Machine
    - name: Create temporary directory for secrets on local machine
      file:
        path: /tmp/postgresql-secrets
        state: directory
        mode: '0700'
      delegate_to: localhost
      run_once: true
      become: false
      
    - name: Generate base64 encoded values for Kubernetes secret
      set_fact:
        postgres_password_b64: "{{ postgres_password | b64encode }}"
      no_log: false
      when: password_verification is defined and password_verification.rc == 0
      
    - name: Create Kubernetes Secret YAML
      copy:
        content: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ postgres_secret_name }}
            namespace: {{ postgres_namespace }}
          data:
            postgres-password: {{ postgres_password_b64 }}
          type: Opaque
        dest: /tmp/postgresql-secrets/{{ postgres_secret_name }}.yml
        mode: '0600'
      delegate_to: localhost
      run_once: true
      become: false
      when: postgres_password_b64 is defined
          
    # Create ConfigMap for non-sensitive data
    - name: Create Kubernetes ConfigMap YAML
      copy:
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: postgres-setup-config
            namespace: postgres
          data:
            postgres-host: {{ postgres_external_host }}
            postgres-port: "{{ postgres_port }}"
        dest: /tmp/postgresql-secrets/postgres-setup-config.yml
        mode: '0644'
      delegate_to: localhost
      run_once: true
      become: false
      when: postgres_password_b64 is defined
            
    # Secure cleanup of temporary files on remote host
    # Final validation - ensure PostgreSQL connection works
    - name: Final password consistency validation
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h localhost -p {{ postgres_port }} -U postgres -c "SELECT 'Setup completed successfully' as status;" 
      register: final_validation
      no_log: false
      when: postgres_password_b64 is defined
      
    - name: Clean up any temporary password files
      shell: |
        find /tmp -name "*postgres*" -type f -mmin -5 -delete 2>/dev/null || true
        find /var/tmp -name "*postgres*" -type f -mmin -5 -delete 2>/dev/null || true
      changed_when: false
      failed_when: false
      
    # Final verification and summary
    - name: Display setup summary
      debug:
        msg: |
          ✅ PostgreSQL {{ postgres_version }} Secure Setup Complete
          
          Configuration:
          - Host: {{ ansible_host }}
          - Port: {{ postgres_port }}
          - Data Directory: {{ postgres_data_dir }}
          - Mount Point: {{ postgres_mount }}
          - Password Encryption: MD5
          - Network: Private subnet only
          - Connection Test: {{ 'PASSED' if pg_test is succeeded else 'FAILED' }}
          
          Kubernetes Files Generated:
          - Secret: /tmp/postgresql-secrets/{{ postgres_secret_name }}.yml
          - ConfigMap: /tmp/postgresql-secrets/postgres-setup-config.yml
          
          Security Features:
          - 16-character secure password
          - MD5 encryption
          - Private subnet deployment (no encryption overhead)
          - Audit logging enabled
          - Kubernetes secrets with proper encoding
          
          Next Steps:
          1. Review files in /tmp/postgresql-secrets/
          2. Deploy to Kubernetes cluster
          3. Securely store/distribute credentials
          
  handlers:
    - name: restart postgresql
      systemd:
        name: postgresql
        state: restarted
