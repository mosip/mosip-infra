---
  - hosts: all
    become: true
    strategy: debug
    gather_facts: true

    tasks:      
      - set_fact:
          VMIP: "{{ hostvars[groups['SandboxVM'][0]]['VMIP'] }}"
      
      - debug: 
          msg: "{{ VMIP }}"
          
      - name: Adding key of postgres
        apt_key: 
          url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
          state: present
 
      - name: Work out the distribution
        command: lsb_release -sc
        register: ubuntu_version

      - name: Adding repository
        apt_repository:
          repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ubuntu_version.stdout }}-pgdg main
          # repo: deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main
          state: present
          filename: PostgreSQL

      - name: Installing dependencies
        apt: name={{item}} state=present update_cache=yes
        run_once: true
        with_items:
          - python-pip
          - python-dev
          - libpq-dev
         # - python-psycopg2
         # - postgresql-10

      - name: Install dependency of psycopg2
        pip: name={{item}} state=present 
        run_once: true
        with_items:
          - psycopg2

      - name: Install PostgreSql
        apt: name={{item}} state=present update_cache=yes
        run_once: true
        with_items:
          - postgresql-10   

      - name: check if database exists
        stat:
          path: /etc/postgresql/10/main/pg_hba.conf
        register: database_result

      - name: create a database
        postgresql_db:
          name: postgres
          encoding: UTF-8
          template: template0 
          state: present
        become_user: postgres
        become: yes
        when: database_result.stat.exists == false

      - debug: msg="{{ database_result.stat.exists }}"

      - name: updating listen address for postgres server
        lineinfile: 
          path: /etc/postgresql/10/main/postgresql.conf
          regexp: '^listen_addresses = '
          line: listen_addresses = '*'

      - name: updating port info for postgres server for 
        lineinfile: 
          path: /etc/postgresql/10/main/postgresql.conf
          regexp: '^port = '
          line: port = 9001

      - name: updating unix_socket_directories for postgres server 
        lineinfile: 
          path: /etc/postgresql/10/main/postgresql.conf
          regexp: '^unix_socket_directories = '
          line: unix_socket_directories = '/var/run/postgresql, /tmp'

      - name: updating max connections for postgres server 
        lineinfile: 
          path: /etc/postgresql/10/main/postgresql.conf
          regexp: '^max_connections = '
          line: max_connections = 1000 

      - name: updating max connections for postgres server 
        lineinfile: 
          path: /etc/postgresql/10/main/postgresql.conf
          regexp: '^shared_buffers = '
          line: shared_buffers = 2GB

      - name: Restart postgres
        service: name=postgresql state=restarted enabled=yes

      - name: Changing default password for postgresql
        run_once: true
        command: sudo -u postgres PGPASSWORD=postgres psql --port=9001 -c "ALTER USER postgres PASSWORD 'postgres'"

      - name: Updating final HBA configuration
        become_user: postgres
        run_once: true
        template:
          src: templates/hba-configurations.j2
          dest: /etc/postgresql/10/main/pg_hba.conf

      - name: Restart postgres
        service: name=postgresql state=restarted enabled=yes
     
      - name: Verifying logs folder
        file:
          path: ../db_scripts/logs
          state: directory

      - name:  Finding all the properties file and storing in a variable
        find:
          paths: ../db_scripts/database
          patterns: '*.properties'
          recurse: yes
        register: paths_properties_file

      - debug: 
          msg: "{{ paths_properties_file.files }}"

      - name: Changing DB_SERVERIP for all modules
        lineinfile:
          path: "{{ item.path }}"
          regexp: '^DB_SERVERIP='
          #line: DB_SERVERIP={{ VMIP }}
          line: DB_SERVERIP=localhost
        with_items: "{{ paths_properties_file.files }}"

      - name: Changing SU_USER_PWD for all modules
        lineinfile:
          path: "{{ item.path }}"
          regexp: '^SU_USER_PWD='
          line: SU_USER_PWD=postgres
        with_items: "{{ paths_properties_file.files }}"
    
      - name: Changing BASEPATH for all modules
        lineinfile:
          path: "{{ item.path }}"
          regexp: '^BASEPATH='
          line: BASEPATH={{ playbook_dir | dirname}}/db_scripts/database/
        with_items: "{{ paths_properties_file.files }}"

      - name: Changing LOG_PATH for all modules
        lineinfile:
          path: "{{ item.path }}"
          regexp: '^LOG_PATH='
          line: LOG_PATH={{ playbook_dir | dirname}}/db_scripts/logs/
        with_items: "{{ paths_properties_file.files }}"

      - name: Changing sh into bash
        replace:
          path: "{{ playbook_dir | dirname}}/db_scripts/database/mosip_all_db_deployment.sh"
          regexp: '^sh'
          replace: 'bash'
      
      - name: Allow everything and enable UFW
        ufw:
          state: enabled
          policy: allow

      - name: Allowing port 9001
        ufw:
          rule: allow
          port: 9001
          proto: tcp
          
      - name: Adding one record
        lineinfile:
          path: ../db_scripts/database/mosip_master/dml/master-valid_document.csv
          line: COE,POE,eng,TRUE,superadmin,now()

      - name: Running db scripts
        command: bash mosip_all_db_deployment.sh
        args: 
          chdir: ../db_scripts/database
      
      - name: Running sql file for mosip_master
        run_once: true
        command:  sudo -u postgres PGPASSWORD=postgres psql --port=9001 -d mosip_master -f ../external-files/bexport_mosip_master_sandbox03182020.sql     

      # - name: Ensure the postgres service is running
      #   service: name=postgresql state=started enabled=yes

      # - name: Uninstall PostgreSQL
      #   apt: name={{item}} state=absent purge=yes
      #   with_items:
      #     - postgresql-*
