{
	"info": {
		"_postman_id": "f31cb31d-5616-4d64-804e-31e2f1fa9a1b",
		"name": "Partner_onbording_modular",
		"description": "This postman collection will serve as an one-stop collection of APIs listed in order so that a partner can be onboarded.\nAll the usernames and passwords are to be provided by the user. The resultant values are also stored in the environmental variables collection.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth_partner_onbaording",
			"item": [
				{
					"name": "Creating_policy_and_policy_group",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"version\": \"LTS\",\n    \"requesttime\": \"{{requesttime}}\",\n    \"metadata\": {},\n    \"request\": {\n        \"userName\": \"{{username}}\",\n        \"password\": \"{{password}}\",\n        \"appId\": \"{{applicationid}}\",\n        \"clientId\": \"mosip-partner-client\",\n        \"clientSecret\": \"{{clientsecret}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('policygroupid',response.id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\":\"PolicyGroup\",\r\n    \"name\":\"{{policygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/group/new",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"group",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating auth policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('policyid',response.id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\": \"Auth Policy\",\r\n    \"name\": \"{{policyname}}\",\r\n    \"version\" : \"1.0\",\r\n    \"policies\": {\r\n      \"allowedAuthTypes\": [\r\n        {\r\n          \"authSubType\": \"IRIS\",\r\n          \"authType\": \"bio\",\r\n          \"mandatory\": false\r\n        },\r\n        {\r\n          \"authSubType\": \"FINGER\",\r\n          \"authType\": \"bio\",\r\n          \"mandatory\": false\r\n        },\r\n        {\r\n          \"authSubType\": \"FACE\",\r\n          \"authType\": \"bio\",\r\n          \"mandatory\": false\r\n        },\r\n        {\r\n          \"authSubType\": \"\",\r\n          \"authType\": \"otp\",\r\n          \"mandatory\": false\r\n        },\r\n        {\r\n           \"authSubType\": \"\",\r\n           \"authType\": \"otp-request\",\r\n           \"mandatory\": false\r\n        },       \r\n        {\r\n          \"authSubType\": \"\",\r\n          \"authType\": \"kyc\",\r\n          \"mandatory\": false\r\n        },\r\n        {\r\n          \"authSubType\": \"\",\r\n          \"authType\": \"demo\",\r\n          \"mandatory\": false\r\n        }         \r\n      ],\r\n      \"allowedKycAttributes\": [\r\n        {\r\n          \"attributeName\": \"fullName\"\r\n        },\r\n         {\r\n          \"attributeName\": \"gender\"\r\n        },\r\n         {\r\n          \"attributeName\": \"residenceStatus\"\r\n        },\r\n        {\r\n          \"attributeName\": \"dateOfBirth\"\r\n        },\r\n        {\r\n          \"attributeName\": \"photo\"\r\n        }\r\n      ],\r\n     \"authTokenType\": \"policy\"      \r\n    },\r\n    \"policyGroupName\": \"{{policygroupname}}\",\r\n    \"policyType\": \"Auth\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishing the policy and policy group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/{{policyid}}/group/{{policygroupid}}/publish",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"{{policyid}}",
										"group",
										"{{policygroupid}}",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keycloak_user_and_apikey_generation",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/AUTH_PARTNER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"AUTH_PARTNER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"AUTH_PARTNER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registering_the_auth_partner",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('partnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"Auth_Partner\",\r\n    \"policyGroup\": \"{{policygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"Auth\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"Auth\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"Auth\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "mapping partner to policyname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('adding apikeyrequestID',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('mappingkey',response.mappingkey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{policyname}}\",\r\n    \"useCaseDescription\": \"mapping Partner to policyName\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/policy/map",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"policy",
										"map"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve partner api key request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"status\": \"Approved\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/policy/{{mappingkey}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"policy",
										"{{mappingkey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create apikey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('getting apikey',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('apikey',response.apiKey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{policyname}}\",\r\n    \"label\": \"{{label}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/generate/apikey",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"generate",
										"apikey"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "MISPpartner&MISP_licensekeycreation",
			"item": [
				{
					"name": "Keycloak partner addition",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{MISPpartnerid}}\",\r\n   \"firstName\":\"{{MISPpartnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{MISPpartneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{MISPpartnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{MISPpartnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{MISPpartnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/MISP_PARTNER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"MISP_PARTNER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"MISP_PARTNER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partner registration & license creation",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{MISPpartnerid}}\",\n    \"password\": \"{{MISPpartnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('MISPpartnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{MISPaddress}}\",\r\n    \"contactNumber\": \"{{MISPcontact}}\",\r\n    \"emailId\": \"{{MISPpartneremail}}\",\r\n    \"organizationName\": \"{{MISPpartnerid}}\",\r\n    \"partnerId\": \"{{MISPpartnerid}}\",\r\n    \"partnerType\": \"Misp_Partner\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"{{clientid}}\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{MISPcacert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{MISPintercert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{MISPpartnercert}},\r\n    \"partnerDomain\": \"AUTH\",\r\n    \"partnerId\": \"{{MISPpartnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Generate the MISP license key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('created',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('misplicensekey',response.licenseKey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"providerId\": \"{{MISPpartnerid}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/misps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"misps"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Device partner registration",
			"item": [
				{
					"name": "Keycloak partner addition",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/DEVICE_PROVIDER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"DEVICE_PROVIDER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"DEVICE_PROVIDER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Device partner registration",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('MISPpartnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"DEVICE_PROVIDER\"\r\n   \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"{{clientid}}\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"DEVICE\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"DEVICE\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"DEVICE\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "FTM partner registration",
			"item": [
				{
					"name": "Keycloak partner addition",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/FTM_PROVIDER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"FTM_PROVIDER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"FTM_PROVIDER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FTM partner registration",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('MISPpartnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"FTM_PROVIDER\"\r\n   \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"{{clientid}}\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"FTM\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"FTM\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"FTM\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Credential partner onboarding",
			"item": [
				{
					"name": "Creating_policy_and_policy_group",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"version\": \"LTS\",\n    \"requesttime\": \"{{requesttime}}\",\n    \"metadata\": {},\n    \"request\": {\n        \"userName\": \"{{username}}\",\n        \"password\": \"{{password}}\",\n        \"appId\": \"{{applicationid}}\",\n        \"clientId\": \"mosip-partner-client\",\n        \"clientSecret\": \"{{clientsecret}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicygroupid',response.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\": \"datashare Policy Group\",\r\n    \"name\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/group/new",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"group",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define data share policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyid',response.id);\r",
											"})\r",
											"pm.test('set policy name',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyname',response.name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n    \"version\": \"string\",\r\n    \"requesttime\": \"{{requesttime}}\",\r\n    \"metadata\": {},\r\n    \"request\": {\r\n        \"policyId\": \"{{datasharepolicyname}}\",\r\n        \"policyGroupName\": \"{{datasharepolicygroupname}}\",\r\n        \"policyType\": \"Datashare\",\r\n        \"name\": \"{{datasharepolicyname}}\",\r\n        \"desc\": \"To Share Data\",\r\n        \"version\": \"1.0\",\r\n        \"policies\": {\r\n            \"shareableAttributes\": [\r\n                {\r\n                    \"attributeName\": \"fullName\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"fullName\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"dateOfBirth\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"dateOfBirth\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"gender\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"gender\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"phone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"phone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"email\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"email\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine1\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine1\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine2\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine2\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine3\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine3\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"region\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"region\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"province\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"province\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"city\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"city\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"postalCode\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"postalCode\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"zone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"zone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"preferredLang\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"preferredLang\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": false\r\n                },\r\n                {\r\n                    \"attributeName\": \"individualBiometrics\",\r\n                    \"group\": \"CBEFF\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"individualBiometrics\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true,\r\n                    \"format\": \"extraction\"\r\n                }\r\n            ],\r\n            \"dataSharePolicies\": {\r\n                \"typeOfShare\": \"Data Share\",\r\n                \"validForInMinutes\": \"30\",\r\n                \"transactionsAllowed\": \"2\",\r\n                \"encryptionType\": \"Partner Based\",\r\n                \"shareDomain\": \"datashare-service\",\r\n                \"source\": \"ID Repository\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishing the policy and policy group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/{{datasharepolicyid}}/group/{{datasharepolicygroupid}}/publish",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"{{datasharepolicyid}}",
										"group",
										"{{datasharepolicygroupid}}",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keycloak partner addition Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/CREDENTIAL_PARTNER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"CREDENTIAL_PARTNER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"CREDENTIAL_PARTNER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "partner registration and apikey generation",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('cppartnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"Credential_Partner\",\r\n    \"policyGroup\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"{{clientid}}\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"AUTH\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Mapping policyid with partnerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('adding apikeyrequestID',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('mappingkey',response.mappingkey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"useCaseDescription\": \"mapping Partner to policyName\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/policy/map",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"policy",
										"map"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding bioextractors",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"string\",\r\n\t\"metadata\": {},\r\n\t\"request\": {\r\n\t\t\"extractors\": [{\r\n\t\t\t\t\"attributeName\": \"photo\",\r\n\t\t\t\t\"biometric\": \"face\",\r\n\t\t\t\t\"extractor\": {\r\n\t\t\t\t\t\"provider\": \"t5-face-lowres\",\r\n\t\t\t\t\t\"version\": \"1.1\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"attributeName\": \"face\",\r\n\t\t\t\t\"biometric\": \"face\",\r\n\t\t\t\t\"extractor\": {\r\n\t\t\t\t\t\"provider\": \"dlib\",\r\n\t\t\t\t\t\"version\": \"3.2\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"requesttime\": \"{{requesttime}}\",\r\n\t\"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}//v1/partnermanager/partners/{{partnerid}}/bioextractors/{{datasharepolicyid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"",
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"bioextractors",
										"{{datasharepolicyid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mapping partner with credential type",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/credentialtype/{{credentialtype}}/policies/{{datasharepolicyname}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"credentialtype",
										"{{credentialtype}}",
										"policies",
										"{{datasharepolicyname}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Online Verification partner onboarding",
			"item": [
				{
					"name": "Creating_policy_and_policy_group Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"version\": \"LTS\",\n    \"requesttime\": \"{{requesttime}}\",\n    \"metadata\": {},\n    \"request\": {\n        \"userName\": \"{{username}}\",\n        \"password\": \"{{password}}\",\n        \"appId\": \"{{applicationid}}\",\n        \"clientId\": \"mosip-partner-client\",\n        \"clientSecret\": \"{{clientsecret}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicygroupid',response.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\": \"datashare Policy Group\",\r\n    \"name\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/group/new",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"group",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define data share policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyid',response.id);\r",
											"})\r",
											"pm.test('set policy name',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyname',response.name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n    \"version\": \"string\",\r\n    \"requesttime\": \"{{requesttime}}\",\r\n    \"metadata\": {},\r\n    \"request\": {\r\n        \"policyId\": \"{{datasharepolicyname}}\",\r\n        \"policyGroupName\": \"{{datasharepolicygroupname}}\",\r\n        \"policyType\": \"Datashare\",\r\n        \"name\": \"{{datasharepolicyname}}\",\r\n        \"desc\": \"To Share Data\",\r\n        \"version\": \"1.0\",\r\n        \"policies\": {\r\n            \"shareableAttributes\": [\r\n                {\r\n                    \"attributeName\": \"fullName\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"fullName\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"dateOfBirth\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"dateOfBirth\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"gender\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"gender\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"phone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"phone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"email\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"email\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine1\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine1\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine2\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine2\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine3\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine3\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"region\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"region\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"province\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"province\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"city\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"city\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"postalCode\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"postalCode\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"zone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"zone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"preferredLang\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"preferredLang\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": false\r\n                },\r\n                {\r\n                    \"attributeName\": \"individualBiometrics\",\r\n                    \"group\": \"CBEFF\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"individualBiometrics\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true,\r\n                    \"format\": \"extraction\"\r\n                }\r\n            ],\r\n            \"dataSharePolicies\": {\r\n                \"typeOfShare\": \"Data Share\",\r\n                \"validForInMinutes\": \"30\",\r\n                \"transactionsAllowed\": \"2\",\r\n                \"encryptionType\": \"Partner Based\",\r\n                \"shareDomain\": \"datashare-service\",\r\n                \"source\": \"ID Repository\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishing the policy and policy group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/{{datasharepolicyid}}/group/{{datasharepolicygroupid}}/publish",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"{{datasharepolicyid}}",
										"group",
										"{{datasharepolicygroupid}}",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keycloak partner addition Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/ONLINE_VERIFICATION_PARTNER",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"ONLINE_VERIFICATION_PARTNER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"ONLINE_VERIFICATION_PARTNER\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "partner registration and apikey generation",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('cppartnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"IITB\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"Online_Verification_Partner\",\r\n    \"policyGroup\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"{{clientid}}\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.certificate);\r",
											"console.log(data);\r",
											"pm.environment.set(\"partnercertificate\",data);\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"Got partner certificate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/idauthentication/v1/internal/getCertificate?applicationId=IDA&referenceId={{partnerid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"idauthentication",
										"v1",
										"internal",
										"getCertificate"
									],
									"query": [
										{
											"key": "applicationId",
											"value": "IDA"
										},
										{
											"key": "referenceId",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"signedpartnercert\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercertificate}},\r\n    \"partnerDomain\": \"AUTH\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Uploading signed cert back to ida",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"applicationId\": \"IDA\",\r\n    \"referenceId\": \"{{partnerid}}\",\r\n    \"certificateData\": {{signedpartnercert}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/idauthentication/v1/internal/uploadCertificate",
									"host": [
										"{{url}}"
									],
									"path": [
										"idauthentication",
										"v1",
										"internal",
										"uploadCertificate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping policyid with partnerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('adding apikeyrequestID',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('mappingkey',response.mappingkey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"useCaseDescription\": \"mapping Partner to policyName\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/policy/map",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"policy",
										"map"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding bioextractors",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"string\",\r\n\t\"metadata\": {},\r\n\t\"request\": {\r\n\t\t\"extractors\": [{\r\n\t\t\t\t\"attributeName\": \"photo\",\r\n\t\t\t\t\"biometric\": \"face\",\r\n\t\t\t\t\"extractor\": {\r\n\t\t\t\t\t\"provider\": \"t5-face-lowres\",\r\n\t\t\t\t\t\"version\": \"1.1\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"attributeName\": \"face\",\r\n\t\t\t\t\"biometric\": \"face\",\r\n\t\t\t\t\"extractor\": {\r\n\t\t\t\t\t\"provider\": \"dlib\",\r\n\t\t\t\t\t\"version\": \"3.2\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"requesttime\": \"{{requesttime}}\",\r\n\t\"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}//v1/partnermanager/partners/{{partnerid}}/bioextractors/{{datasharepolicyid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"",
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"bioextractors",
										"{{datasharepolicyid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mapping partner with credential type",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/credentialtype/{{credentialtype}}/policies/{{datasharepolicyname}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"credentialtype",
										"{{credentialtype}}",
										"policies",
										"{{datasharepolicyname}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create apikey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('getting apikey',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('apikey',response.apiKey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"label\": \"{{label}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/generate/apikey",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"generate",
										"apikey"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manual adjudication partner",
			"item": [
				{
					"name": "Creating_policy_and_policy_group Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"version\": \"LTS\",\n    \"requesttime\": \"{{requesttime}}\",\n    \"metadata\": {},\n    \"request\": {\n        \"userName\": \"{{username}}\",\n        \"password\": \"{{password}}\",\n        \"appId\": \"{{applicationid}}\",\n        \"clientId\": \"mosip-partner-client\",\n        \"clientSecret\": \"{{clientsecret}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicygroupid',response.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\": \"datashare Policy Group\",\r\n    \"name\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/group/new",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"group",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define data share policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyid',response.id);\r",
											"})\r",
											"pm.test('set policy name',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyname',response.name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n    \"version\": \"string\",\r\n    \"requesttime\": \"{{requesttime}}\",\r\n    \"metadata\": {},\r\n    \"request\": {\r\n        \"policyId\": \"{{datasharepolicyname}}\",\r\n        \"policyGroupName\": \"{{datasharepolicygroupname}}\",\r\n        \"policyType\": \"Datashare\",\r\n        \"name\": \"{{datasharepolicyname}}\",\r\n        \"desc\": \"To Share Data\",\r\n        \"version\": \"1.0\",\r\n        \"policies\": {\r\n            \"shareableAttributes\": [\r\n                {\r\n                    \"attributeName\": \"fullName\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"fullName\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"dateOfBirth\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"dateOfBirth\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"gender\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"gender\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"phone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"phone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"email\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"email\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine1\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine1\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine2\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine2\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine3\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine3\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"region\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"region\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"province\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"province\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"city\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"city\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"postalCode\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"postalCode\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"zone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"zone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"preferredLang\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"preferredLang\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": false\r\n                },\r\n                {\r\n                    \"attributeName\": \"individualBiometrics\",\r\n                    \"group\": \"CBEFF\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"individualBiometrics\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true,\r\n                    \"format\": \"extraction\"\r\n                }\r\n            ],\r\n            \"dataSharePolicies\": {\r\n                \"typeOfShare\": \"Data Share\",\r\n                \"validForInMinutes\": \"30\",\r\n                \"transactionsAllowed\": \"2\",\r\n                \"encryptionType\": \"Partner Based\",\r\n                \"shareDomain\": \"datashare-service\",\r\n                \"source\": \"ID Repository\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishing the policy and policy group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/{{datasharepolicyid}}/group/{{datasharepolicygroupid}}/publish",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"{{datasharepolicyid}}",
										"group",
										"{{datasharepolicygroupid}}",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keycloak_user_and_apikey_generation Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/CREDENTIAL_ISSUANCE",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"CREDENTIAL_ISSUANCE"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"CREDENTIAL_ISSUANCE\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registering_the_auth_partner Copy",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('partnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"Manual_Adjudication\",\r\n    \"policyGroup\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"AUTH\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "mapping partner to policyname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('adding apikeyrequestID',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('mappingkey',response.mappingkey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"useCaseDescription\": \"mapping Partner to policyName\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/policy/map",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"policy",
										"map"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve partner api key request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"status\": \"Approved\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/policy/{{mappingkey}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"policy",
										"{{mappingkey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create apikey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('getting apikey',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('apikey',response.apiKey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"label\": \"{{label}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/generate/apikey",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"generate",
										"apikey"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ABIS partner",
			"item": [
				{
					"name": "Creating_policy_and_policy_group Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"version\": \"LTS\",\n    \"requesttime\": \"{{requesttime}}\",\n    \"metadata\": {},\n    \"request\": {\n        \"userName\": \"{{username}}\",\n        \"password\": \"{{password}}\",\n        \"appId\": \"{{applicationid}}\",\n        \"clientId\": \"mosip-partner-client\",\n        \"clientSecret\": \"{{clientsecret}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicygroupid',response.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"desc\": \"datashare Policy Group\",\r\n    \"name\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/group/new",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"group",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define data share policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('set policy id',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyid',response.id);\r",
											"})\r",
											"pm.test('set policy name',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('datasharepolicyname',response.name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n    \"version\": \"string\",\r\n    \"requesttime\": \"{{requesttime}}\",\r\n    \"metadata\": {},\r\n    \"request\": {\r\n        \"policyId\": \"{{datasharepolicyname}}\",\r\n        \"policyGroupName\": \"{{datasharepolicygroupname}}\",\r\n        \"policyType\": \"Datashare\",\r\n        \"name\": \"{{datasharepolicyname}}\",\r\n        \"desc\": \"To Share Data\",\r\n        \"version\": \"1.0\",\r\n        \"policies\": {\r\n            \"shareableAttributes\": [\r\n                {\r\n                    \"attributeName\": \"fullName\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"fullName\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"dateOfBirth\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"dateOfBirth\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"gender\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"gender\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"phone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"phone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"email\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"email\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine1\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine1\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine2\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine2\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"addressLine3\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"addressLine3\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"region\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"region\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"province\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"province\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"city\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"city\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"postalCode\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"postalCode\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"zone\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"zone\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true\r\n                },\r\n                {\r\n                    \"attributeName\": \"preferredLang\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"preferredLang\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": false\r\n                },\r\n                {\r\n                    \"attributeName\": \"individualBiometrics\",\r\n                    \"group\": \"CBEFF\",\r\n                    \"source\": [\r\n                        {\r\n                            \"attribute\": \"individualBiometrics\"\r\n                        }\r\n                    ],\r\n                    \"encrypted\": true,\r\n                    \"format\": \"extraction\"\r\n                }\r\n            ],\r\n            \"dataSharePolicies\": {\r\n                \"typeOfShare\": \"Data Share\",\r\n                \"validForInMinutes\": \"30\",\r\n                \"transactionsAllowed\": \"2\",\r\n                \"encryptionType\": \"Partner Based\",\r\n                \"shareDomain\": \"datashare-service\",\r\n                \"source\": \"ID Repository\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/policymanager/policies",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishing the policy and policy group",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/policymanager/policies/{{datasharepolicyid}}/group/{{datasharepolicygroupid}}/publish",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"policymanager",
										"policies",
										"{{datasharepolicyid}}",
										"group",
										"{{datasharepolicygroupid}}",
										"publish"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keycloak_user_and_apikey_generation Copy",
					"item": [
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding partner as an user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"username\":\"{{partnerid}}\",\r\n   \"firstName\":\"{{partnerid}}\",\r\n   \"lastName\":\"\",\r\n   \"email\":\"{{partneremail}}\",\r\n   \"enabled\":true,\r\n   \"credentials\":[ \r\n      { \r\n         \"temporary\": false,\r\n         \"type\":\"password\",\r\n         \"value\":\"{{partnerpassword}}\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting partner's userid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = jsonData[0].id;\r",
											"console.log(data);\r",
											"pm.environment.set(\"kcuserid\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users?username={{partnerid}}",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{partnerid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting the required role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var thisdata = jsonData.id;\r",
											"console.log(thisdata);\r",
											"pm.environment.set(\"kcroleid\",thisdata);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/roles/CREDENTIAL_ISSUANCE",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"roles",
										"CREDENTIAL_ISSUANCE"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting keycloak token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"//var data = JSON.stringify(jsonData);\r",
											"console.log(jsonData.access_token);\r",
											"pm.environment.set(\"keycloaktoken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "admin-cli",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{keycloakusername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{keycloakpassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{kcurl}}/auth/realms/master/protocol/openid-connect/token",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"realms",
										"master",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mapping roles with partner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloaktoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\"id\" : \"{{kcroleid}}\",\r\n   \"name\":\"CREDENTIAL_ISSUANCE\"}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kcurl}}/auth/admin/realms/mosip/users/{{kcuserid}}/role-mappings/realm",
									"host": [
										"{{kcurl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"mosip",
										"users",
										"{{kcuserid}}",
										"role-mappings",
										"realm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registering_the_auth_partner Copy",
					"item": [
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partner self registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('partnerid',response.partnerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"address\": \"{{partneraddress}}\",\r\n    \"contactNumber\": \"{{partnercontact}}\",\r\n    \"emailId\": \"{{partneremail}}\",\r\n    \"organizationName\": \"{{partnerid}}\",\r\n    \"partnerId\": \"{{partnerid}}\",\r\n    \"partnerType\": \"ABIS_Partner\",\r\n    \"policyGroup\": \"{{datasharepolicygroupname}}\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"LTS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading CA certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{cacert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								},
								"description": "Here It is assumed that the Partner will provide MOSIP with the three certificates, namely ca certificate, intermediate certificate, and partner certificate ."
							},
							"response": []
						},
						{
							"name": "Uploading intermediate certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{intercert}},\r\n    \"partnerDomain\": \"AUTH\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/ca/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"ca",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploading partner certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var data = JSON.stringify(jsonData.response.signedCertificateData);\r",
											"console.log(data);\r",
											"pm.environment.set(\"SIGNEDPCERT\",data);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"certificateData\":{{partnercert}},\r\n    \"partnerDomain\": \"AUTH\",\r\n    \"partnerId\": \"{{partnerid}}\"\r\n \r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/certificate/upload",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"certificate",
										"upload"
									]
								},
								"description": "The partner cert will be signed back and shared with the response as well ."
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "mapping partner to policyname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('adding apikeyrequestID',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('mappingkey',response.mappingkey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"useCaseDescription\": \"mapping Partner to policyName\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/policy/map",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"policy",
										"map"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"version\": \"LTS\",\n  \"requesttime\":\"{{requesttime}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"appId\":\"{{applicationid}}\",\n    \"clientId\":\"mosip-partner-client\",\n    \"clientSecret\":\"{{clientsecret}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve partner api key request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"status\": \"Approved\"\r\n  },\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"version\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/policy/{{mappingkey}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"policy",
										"{{mappingkey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticating as partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"2022-02-09T05:33:57.850Z\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"{{partnerid}}\",\n    \"password\": \"{{partnerpassword}}\",\n    \"appId\": \"partner\"\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/v1/authmanager/authenticate/useridPwd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"authmanager",
										"authenticate",
										"useridPwd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create apikey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('getting apikey',function(){\r",
											"    const {response} =pm.response.json();\r",
											"    pm.environment.set('apikey',response.apiKey);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('requesttime', (new Date()).toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"{{requesttime}}\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"policyName\": \"{{datasharepolicyname}}\",\r\n    \"label\": \"{{label}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/partnermanager/partners/{{partnerid}}/generate/apikey",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"partnermanager",
										"partners",
										"{{partnerid}}",
										"generate",
										"apikey"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}