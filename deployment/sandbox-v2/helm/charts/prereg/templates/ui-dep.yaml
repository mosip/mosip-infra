---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.services.ui.serviceName}}
  namespace: default
spec:
  {{ $podconfig := .Values.services.ui.podconfig }}
  replicas: {{ $podconfig.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.services.ui.serviceName }}
  minReadySeconds: {{ $podconfig.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ $podconfig.maxUnavailable }}
      maxSurge: {{ $podconfig.maxSurge }}
  template:
    metadata:
      labels:
        app: {{.Values.services.ui.serviceName}}
        exportLogs: {{ .Values.exportLogs }}
    spec:
      {{- include "dockerHubSecret" .  | indent 6}}
      containers:
      - name: {{.Values.services.ui.serviceName}}
        image: {{ .Values.services.ui.dockerImage  }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- include "resourcesDefinition" (dict "res" $podconfig.resources) | indent 8 }}
        env:
        - name: JDK_JAVA_OPTIONS
          value: {{ $podconfig.java_opts }}
        ports:
        - containerPort: {{ .Values.services.ui.ports.containerPort }}
        readinessProbe:
          httpGet:
            path: { { .Values.services.ui.healthUrl } }
            port: { { .Values.services.ui.ports.containerPort } }
          periodSeconds: { { .Values.probe.period } }
          timeoutSeconds: { { .Values.probe.timeout } }
          failureThreshold: { { .Values.probe.failureThreshold } }
        livenessProbe:
          httpGet:
            path: { { .Values.services.ui.healthUrl } }
            port: { { .Values.services.ui.ports.containerPort } }
          periodSeconds: { { .Values.probe.livenessPeriod } }
          timeoutSeconds: { { .Values.probe.timeout } }
          failureThreshold: { { .Values.probe.failureThreshold } }
        startupProbe:
          httpGet:
            path: { { .Values.services.ui.healthUrl } }
            port: { { .Values.services.ui.ports.containerPort } }
          failureThreshold: { { .Values.probe.failureThreshold } }
          periodSeconds: { { .Values.probe.startupPeriod } }
          timeoutSeconds: { { .Values.probe.timeout } }
          initialDelaySeconds: { { .Values.probe.initialDelaySeconds } }

        volumeMounts:
            - name: ui-config 
              mountPath: /usr/share/nginx/html/assets/config.json
              # The above path is fixed in Dockerfile
              subPath: config.json #TODO: subPath is needed.  Check why
              # The config map gets mounted like files where key=file, value=file contents
      volumes:
        - name: ui-config
          configMap:
            name: {{ .Values.services.ui.configName }}
