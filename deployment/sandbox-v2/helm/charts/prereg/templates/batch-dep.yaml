apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.services.batch.serviceName }} 
  namespace: {{ .Release.Namespace }} 
  labels:
    app: {{ .Values.services.batch.serviceName }}
    component: {{ .Values.component }} 
    
spec:
  {{ $podconfig := .Values.services.batch.podconfig }}
  replicas: {{ $podconfig.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.services.batch.serviceName }}
  minReadySeconds: {{ $podconfig.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ $podconfig.maxUnavailable }}
      maxSurge: {{ $podconfig.maxSurge }}
  template:
    metadata:
      labels:
        app: {{ .Values.services.batch.serviceName }} 
        component: {{ .Values.component }} 
        exportLogs: {{ .Values.exportLogs }}
    spec:
      {{- include "dockerHubSecret" .  | indent 6}}
      containers:
      - name: {{ .Values.services.batch.serviceName }} 
        image: {{ .Values.services.batch.dockerImage }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- include "resourcesDefinition" (dict "res" $podconfig.resources) | indent 8 }}
        env:
        - name: active_profile_env
          value: {{ .Values.activeProfileEnv }} 
        - name: spring_config_label_env
          value: {{ .Values.springConfigLabel }} 
        - name: spring_config_url_env
          value: {{ .Values.configServerUrl }} 
        - name: artifactory_url_env
          value: {{ .Values.artifactoryUrl }} 
        - name: is_glowroot_env
          value: {{ .Values.isGlowroot }}
        - name: JDK_JAVA_OPTIONS
          value: {{ $podconfig.java_opts }}
        ports:
        - containerPort: {{ .Values.services.batch.ports.containerPort }}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - HEALTH_CHECK_PATHS="http://prereg-application-service:80/preregistration/v1/actuator/health";
                for str in $HEALTH_CHECK_PATHS; do
                curl_output="$(curl -w %{http_code} -o /dev/null -s $str)";
                if ! [ "$curl_output" = "200" ]; then
                echo "$str failed with status code $curl_output" >> /dev/stderr && exit 1;
                fi;
                done
          periodSeconds: { { .Values.probe.period } }
          timeoutSeconds: { { .Values.probe.timeout } }
          failureThreshold: { { .Values.probe.failureThreshold } }
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - HEALTH_CHECK_PATHS="http://prereg-application-service:80/preregistration/v1/actuator/health";
                for str in $HEALTH_CHECK_PATHS; do
                curl_output="$(curl -w %{http_code} -o /dev/null -s $str)";
                if ! [ "$curl_output" = "200" ]; then
                echo "$str failed with status code $curl_output" >> /dev/stderr && exit 1;
                fi;
                done
          periodSeconds: { { .Values.probe.livenessPeriod } }
          timeoutSeconds: { { .Values.probe.timeout } }
          failureThreshold: { { .Values.probe.failureThreshold } }
        startupProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - HEALTH_CHECK_PATHS="http://prereg-application-service:80/preregistration/v1/actuator/health";
                for str in $HEALTH_CHECK_PATHS; do
                curl_output="$(curl -w %{http_code} -o /dev/null -s $str)";
                if ! [ "$curl_output" = "200" ]; then
                echo "$str failed with status code $curl_output" >> /dev/stderr && exit 1;
                fi;
                done
          failureThreshold: { { .Values.probe.failureThreshold } }
          periodSeconds: { { .Values.probe.startupPeriod } }
          timeoutSeconds: { { .Values.probe.timeout } }
          initialDelaySeconds: { { .Values.probe.initialDelaySeconds } }
