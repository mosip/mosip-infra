component: regproc
part-of: mosip
activeProfileEnv: mz 
springConfigLabel: {{ config_repo.version }} 
configServerUrl: {{ config_server.internal_url }}
storageClass: dm-storage-class  # See sc, pv templates
exportLogs: enabled  # Let filebeat export the logs
regprocJarsPath: {{ regproc_clamav_jar_path }}

sitePublicUrl: {{ site.sandbox_public_url }}

probe:
  period: 30 # Seconds
  timeout: 10
  livenessPeriod: 30
  failureThreshold: 30
  startupPeriod: 10

ingress:
   namespace: default

artifactoryUrl: {{ artifactory_url }} 
iamAdapterUrl: {{ iam_adapter_regproc_url }}

imagePullPolicy: Always 

isGlowroot: {{ is_glowroot }} 

dockerHub:
  private: {{ docker.hub.private }}  
  keyname: {{ docker.hub.keyname }}

services:
  camel:
    serviceName: {{ versions.services.regproc.camel.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.camel.values()[0] }}
    ports:
      eventbusPort: 5723
      hazelcastPort: 5701
      containerPort: 8022
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/camelbridge/actuator/health
    podconfig:
      {{ podconfig.regproc.camel | to_nice_yaml(indent=6) | indent(6) }}

  group2:  
    serviceName: {{ versions.services.regproc.group2.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group2.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 8090
    podconfig:
      {{ podconfig.regproc.group2 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/securezone/actuator/health

  group3:  
    serviceName: {{ versions.services.regproc.group3.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group3.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 9071
    podconfig:
      {{ podconfig.regproc.group3 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/abishandler/actuator/health

  group4:  
    serviceName: {{ versions.services.regproc.group4.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group4.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 8091
    podconfig:
      {{ podconfig.regproc.group4 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/demodedupe/actuator/health

  group5:  
    serviceName: {{ versions.services.regproc.group5.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group5.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 8089
    podconfig:
      {{ podconfig.regproc.group5 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/cmdvalidator/actuator/health

  group7:  
    serviceName: {{ versions.services.regproc.group7.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group7.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 8099
    podconfig:
      {{ podconfig.regproc.group7 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/uin-generator/actuator/health

  group6:  
    serviceName: {{ versions.services.regproc.group6.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.group6.values()[0] }}
    ports:
      hazelcastPort: 5701
      servicePort: 80
      containerPort: 8087
    podconfig:
      {{ podconfig.regproc.group6 | to_nice_yaml(indent=6) | indent(6) }}
    healthUrl: /registrationprocessor/v1/uploader/actuator/health

  notification:  # This is has a service front end for access (notification-svc.yaml)
    serviceName: regproc-securezone-notification-stage
    dockerImage: {{ versions.services.regproc.group2.values()[0] }}
    ports:
      eventbusPort: 5712
      hazelcastPort: 5701
      containerPort: 8090
      servicePort: 80 
    ingressPath: /registrationprocessor/v1/securezone/
    healthUrl: /registrationprocessor/v1/securezone/actuator/health

  classifier:  
    serviceName: regproc-packet-classifier-stage
    dockerImage: {{ versions.services.regproc.group6.values()[0] }}
    ports:
      eventbusPort: 5724
      hazelcastPort: 5701
      containerPort: 8092
      servicePort: 80
    ingressPath: /registrationprocessor/v1/packetclassifier/
    healthUrl: /registrationprocessor/v1/packetclassifier/actuator/health

  reprocess:
    serviceName: {{ versions.services.regproc.reprocess.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.reprocess.values()[0] }}
    ports:
      eventbusPort: 5750
      hazelcastPort: 5701
      containerPort: 8021
      eventUpdateEventBusPort: 5751
      eventUpdateServerPort: 8024
      workflowActionEventBusPort: 5752
      workflowActionServerPort: 8023
      workflowSearchEventBusPort: 5753
      workflowSearchServerPort: 8025
      servicePort: 80
    ingressPath: /registrationprocessor/v1/reprocessor/ 
    healthUrl: /registrationprocessor/v1/reprocessor/actuator/health
    podconfig:
      {{ podconfig.regproc.reprocess | to_nice_yaml(indent=6) | indent(6) }}

  uploader:
    serviceName: regproc-packet-uploader-stage
    dockerImage: {{ versions.services.regproc.group6.values()[0] }}
    ports:
      eventbusPort: 5714
      hazelcastPort: 5701
      containerPort: 8087
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/uploader/actuator/health

  quality:
    serviceName: regproc-quality-checker-stage
    dockerImage: {{ versions.services.regproc.group2.values()[0] }}
    ports:
      eventbusPort: 5727
      hazelcastPort: 5701
      containerPort: 9072
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/qualitychecker/actuator/health

  validator:
    serviceName: regproc-packet-validator-stage
    dockerImage: {{ versions.services.regproc.group5.values()[0] }}
    ports:
      eventbusPort: 5715
      hazelcastPort: 5701
      containerPort: 8088
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/packetvalidator/actuator/health

  osi:
    serviceName: regproc-osi-validator-stage
    dockerImage: {{ versions.services.regproc.group5.values()[0] }}
    ports:
      eventbusPort: 5716
      hazelcastPort: 5701
      containerPort: 8089
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/osivalidator/actuator/health

  demo:
    serviceName: regproc-demo-dedupe-stage
    dockerImage: {{ versions.services.regproc.group4.values()[0] }}
    ports:
      eventbusPort: 5717
      hazelcastPort: 5701
      containerPort: 8091
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/demodedupe/actuator/health

  bio:
    serviceName: regproc-bio-dedupe-stage
    dockerImage: {{ versions.services.regproc.group3.values()[0] }}
    ports:
      eventbusPort: 5718
      hazelcastPort: 5701
      containerPort: 9096
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/biodedupe/actuator/health

  bioauth:
    serviceName: regproc-biometric-authentication-stage
    dockerImage: {{ versions.services.regproc.group4.values()[0] }}
    ports:
      eventbusPort: 5777
      hazelcastPort: 5701
      containerPort: 8020
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/bioauth/actuator/health

  abishandler:
    serviceName: regproc-abis-handler-stage
    dockerImage: {{ versions.services.regproc.group3.values()[0] }}
    ports:
      eventbusPort: 5726
      hazelcastPort: 5701
      containerPort: 9071
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/abishandler/actuator/health

  abismid:
    serviceName: regproc-abis-middleware-stage
    dockerImage: {{ versions.services.regproc.group3.values()[0] }}
    ports:
      eventbusPort: 5888
      hazelcastPort: 5701
      containerPort: 8091
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/abismiddleware/actuator/health

  manual:
    serviceName: regproc-manual-verification-stage
    dockerImage: {{ versions.services.regproc.group3.values()[0] }}
    ports:
      eventbusPort: 5720
      hazelcastPort: 5701
      containerPort: 8084
      servicePort: 80
    ingressPath: /registrationprocessor/v1/manualverification/
    healthUrl: /registrationprocessor/v1/manualverification/actuator/health

  uin:
    serviceName: regproc-uin-generator-stage
    dockerImage: {{ versions.services.regproc.group7.values()[0] }}
    ports:
      eventbusPort: 5719
      hazelcastPort: 5701
      containerPort: 8099
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/uin-generator/actuator/health

  msg:
    serviceName: regproc-message-sender-stage
    dockerImage: {{ versions.services.regproc.group4.values()[0] }}
    ports:
      eventbusPort: 5721
      hazelcastPort: 5701
      containerPort: 8088
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/sender-stage/actuator/health

  print:
    serviceName: regproc-printing-stage
    dockerImage: {{ versions.services.regproc.group7.values()[0] }}
    ports:
      eventbusPort: 5722
      hazelcastPort: 5701
      containerPort: 8099
      servicePort: 80
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/print-stage/actuator/health

  trans:
    serviceName: {{ versions.services.regproc.trans.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.trans.values()[0] }}
    ports:
      containerPort: 8110
      servicePort: 80
    ingressPath: /registrationprocessor/v1/registrationtransaction/
    healthUrl: /registrationprocessor/v1/registrationtransaction/actuator/health
    podconfig:
      {{ podconfig.regproc.trans | to_nice_yaml(indent=6) | indent(6) }}

  notificationService:  # This is has a service front end for access (notification-service-svc.yaml)
    serviceName: {{ versions.services.regproc.notificationService.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.notificationService.values()[0] }}
    ports:
      containerPort: 8088
      servicePort: 80 
    ingressPath: /registrationprocessor/v1/notification/
    healthUrl: /registrationprocessor/v1/notification/actuator/health
    podconfig:
      {{ podconfig.regproc.notificationService | to_nice_yaml(indent=6) | indent(6) }}

  workflow:
    serviceName: {{ versions.services.regproc.workflow.keys()[0] }}
    dockerImage: {{ versions.services.regproc.workflow.values()[0] }}
    ports:
      eventbusPort: 5754
      serverPort: 8026
      workflowInternalEventBusPort: 5751
      workflowInternalServerPort: 8024
      workflowActionEventBusPort: 5752
      workflowActionServerPort: 8023
      servicePort: 80
    ingressPath: /registrationprocessor/v1/workflowmanager/
    healthUrl: /registrationprocessor/v1/workflowmanager/actuator/health
    podconfig:
      {{ podconfig.regproc.workflow | to_nice_yaml(indent=6) | indent(6) }}


job:
  salt:
    serviceName: {{ versions.services.regproc.salt.keys()[0] }}
    dockerImage: {{ versions.services.regproc.salt.values()[0] }}
    schema: regprc
    alias: mosip.regproc.db
    configName: registration-processor

