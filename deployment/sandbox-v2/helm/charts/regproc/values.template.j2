namespace: default
component: regproc
part-of: mosip
activeProfileEnv: mz 
springConfigLabel: master
configServerUrl: http://config-server/config
storageClass: dm-storage-class  # See sc, pv templates

probe:
  initialDelay: 180  # Seconds
  period: 30 # Seconds

ingress:
   namespace: default

artifactoryUrl: {{ artifactory_url }} 

imagePullPolicy: Always 

domainName: {{ sandbox_domain_name }}
internalDomain: {{ clusters.mz.nodeport_node }} 
isGlowroot: {{ is_glowroot }} 

services:
  camel:
    serviceName: {{ versions.services.regproc.camel.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.camel.values()[0] }}
    ports:
      eventbusPort: 5723
      hazelcastPort: 5701
      containerPort: 8022
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/camelbridge/actuator/health
  notification:  # This is has a service front end for access (notification-svc.yaml)
    serviceName: {{ versions.services.regproc.notification.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.notification.values()[0] }}
    ports:
      eventbusPort: 5712
      hazelcastPort: 5701
      containerPort: 8090
      servicePort: 80 
    ingressPath: /registrationprocessor/v1/securezone/
    healthUrl: /registrationprocessor/v1/securezone/actuator/health
  uploader:
    serviceName: {{ versions.services.regproc.uploader.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.uploader.values()[0] }}
    ports:
      eventbusPort: 5714
      hazelcastPort: 5701
      containerPort: 8087
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/uploader/actuator/health
  quality:
    serviceName: {{ versions.services.regproc.quality.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.quality.values()[0] }}
    ports:
      eventbusPort: 5727
      hazelcastPort: 5701
      containerPort: 9072
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/qualitychecker/actuator/health
  validator:
    serviceName: {{ versions.services.regproc.validator.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.validator.values()[0] }}
    ports:
      eventbusPort: 5715
      hazelcastPort: 5701
      containerPort: 8088
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/packetvalidator/actuator/health
  osi:
    serviceName: {{ versions.services.regproc.osi.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.osi.values()[0] }}
    ports:
      eventbusPort: 5716
      hazelcastPort: 5701
      containerPort: 8089
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/osivalidator/actuator/health
  demo:
    serviceName: {{ versions.services.regproc.demo.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.demo.values()[0] }}
    ports:
      eventbusPort: 5717
      hazelcastPort: 5701
      containerPort: 8091
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/demodedupe/actuator/health
  bio:
    serviceName: {{ versions.services.regproc.bio.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.bio.values()[0] }}
    ports:
      eventbusPort: 5718
      hazelcastPort: 5701
      containerPort: 9096
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/biodedupe/actuator/health
  biosvc:
    serviceName: {{ versions.services.regproc.biosvc.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.biosvc.values()[0] }}
    ports:
      containerPort: 9097
      servicePort: 80
    ingressPath: /registrationprocessor/v1/bio-dedupe
    healthUrl: /registrationprocessor/v1/bio-dedupe/actuator/health
  bioauth:
    serviceName: {{ versions.services.regproc.bioauth.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.bioauth.values()[0] }}
    ports:
      eventbusPort: 5777
      hazelcastPort: 5701
      containerPort: 8020
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/bioauth/actuator/health
  abishandler:
    serviceName: {{ versions.services.regproc.abishandler.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.abishandler.values()[0] }}
    ports:
      eventbusPort: 5726
      hazelcastPort: 5701
      containerPort: 9071
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/abishandler/actuator/health
  abismid:
    serviceName: {{ versions.services.regproc.abismid.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.abismid.values()[0] }}
    ports:
      eventbusPort: 5888
      hazelcastPort: 5701
      containerPort: 8091
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/abismiddleware/actuator/health
  proxyabis:
    serviceName: {{ versions.services.regproc.proxyabis.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.proxyabis.values()[0] }}
    ports:
      containerPort: 9098
      servicePort: 80
    ingressPath: /abis
    healthUrl: /abis/actuator/health
  manual:
    serviceName: {{ versions.services.regproc.manual.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.manual.values()[0] }}
    ports:
      eventbusPort: 5720
      hazelcastPort: 5701
      containerPort: 8084
      servicePort: 80
    ingressPath: /registrationprocessor/v1/manualverification/
    healthUrl: /registrationprocessor/v1/manualverification/actuator/health
  external:
    serviceName: {{ versions.services.regproc.external.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.external.values()[0] }}
    ports:
      eventbusPort: 5736
      hazelcastPort: 5701
      containerPort: 8095
    ingressPath: ''
    healthUrl: /registrationprocessor/v1/external/actuator/health 
  eis: 
    serviceName: {{ versions.services.regproc.eis.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.eis.values()[0] }}
    ports:
      containerPort: 8201
      servicePort: 80
    ingressPath: /registrationprocessor/v1/eis
    healthUrl: /registrationprocessor/v1/eis/actuator/health
  uin:
    serviceName: {{ versions.services.regproc.uin.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.uin.values()[0] }}
    ports:
      eventbusPort: 5719
      hazelcastPort: 5701
      containerPort: 8099
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/uin-generator/actuator/health
  msg:
    serviceName: {{ versions.services.regproc.msg.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.msg.values()[0] }}
    ports:
      eventbusPort: 5721
      hazelcastPort: 5701
      containerPort: 8088
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/sender-stage/actuator/health
  print:
    serviceName: {{ versions.services.regproc.print.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.print.values()[0] }}
    ports:
      eventbusPort: 5722
      hazelcastPort: 5701
      containerPort: 8099
    ingressPath: '' 
    healthUrl: /registrationprocessor/v1/print-stage/actuator/health
  printsvc:
    serviceName: {{ versions.services.regproc.printsvc.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.printsvc.values()[0] }}
    ports:
      containerPort: 9099
      servicePort: 80
    ingressPath: /registrationprocessor/v1/print/
    healthUrl: /registrationprocessor/v1/print/actuator/health
  trans:
    serviceName: {{ versions.services.regproc.trans.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.trans.values()[0] }}
    ports:
      containerPort: 8110
      servicePort: 80
    ingressPath: /registrationprocessor/v1/registrationtransaction/
    healthUrl: /registrationprocessor/v1/registrationtransaction/actuator/health
  request: 
    serviceName: {{ versions.services.regproc.request.keys()[0] }} 
    dockerImage: {{ versions.services.regproc.request.values()[0] }}
    ports:
      containerPort: 8082
      servicePort: 80
    ingressPath: /registrationprocessor/v1/requesthandler/
    healthUrl: /registrationprocessor/v1/requesthandler/actuator/health
