---
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: {{ .Values.name }}
  namespace: default
spec:
  replicas: {{ .Values.services.postgres.podconfig.replicas }} 
  selector:
    matchLabels:
      app: {{ .Values.name }}
  minReadySeconds: {{ .Values.services.postgres.podconfig.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.services.postgres.podconfig.maxUnavailable }}
      maxSurge: {{ .Values.services.postgres.podconfig.maxSurge }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }} 
    spec:
{{ if eq .Values.nodeAffinity.enabled true }}
      tolerations:
      - key: {{ .Values.nodeAffinity.taint.key }}
        operator: "Equal"
        value: {{ .Values.nodeAffinity.taint.value }}
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                -  {{ .Values.nodeAffinity.node }}
{{ end }}
      containers:
      - name: {{ .Values.name }} 
        image: {{ .Values.docker.image }}:{{ .Values.docker.tag }}
        args: ["-c", "max_connections={{ .Values.maxConnections }}"]
        env:
        - name: POSTGRES_USER
          value: {{ .Values.user }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.password }} 
        ports:
        - containerPort: {{ .Values.docker.containerPort }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.docker.containerPort }}
        volumeMounts:
        - name: pg-data
          mountPath: /var/lib/postgresql/data/ # See notes above
      volumes:
      - name: pg-data
        persistentVolumeClaim:
          claimName: {{ .Values.pvc.name }} 

