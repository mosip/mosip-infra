node {
 def branch = '0.12.0_ADMIN'
 def dockerImagesTagVersion = 'NaV'  
 def registryUrl = params.REGISTRY_URL
 def registryName = params.REGISTRY_NAME
 def registryCredentials = params.REGISTRY_CREDENTIALS
 def gitUrl = params.GIT_URL
 def gitCredentials = params.GIT_CREDENTIALS
 k8DevContext = params.K8_CLUSTER_CONTEXT
 def moduleName = params.MODULE_NAME

 stage('------- Checkout --------') {
  dir('admin-ui') {
   git branch: branch, credentialsId: gitCredentials, url: gitUrl
  }
 }


stage ('---------- build ---------------') {
  dir('admin-ui'){
			sh "npm install && npm run-script build -- --prod --base-href . --output-path=dist "
  }
}


 stage('------ Docker Images : Push & Cleanup -------') {
 dir('admin-ui'){
 def packageJSON = readJSON file: 'package.json'
    def packageJSONVersion = packageJSON.version
    echo packageJSONVersion
   dockerImagesTagVersion = "$packageJSONVersion"
   }
   echo dockerImagesTagVersion
    updatedDockerImages = "$registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     docker.withRegistry(registryUrl, registryCredentials) {
      def buildName = "$registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
      newApp = docker.build(buildName,"./admin-ui/")
      newApp.push()
      newApp.push 'latest'
     }
     /*
     Removing local images
     */
     sh "docker rmi $registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
    /*
     Removing all untagged images
     */
    sh "docker rmi \$(docker images | awk '/<none>/ {print \$3}') || true"

  }


    stage('Kubernetes Deploy : QA'){
      //this stage will rollout the changes on Kubernetes Cluster
      sh "kubectl config use-context $k8DevContext"
        echo "Updating [ Service:$moduleName]"
        sh "kubectl set image deployment/$moduleName $moduleName=$updatedDockerImages"
        
      echo "Getting list of all services" 
      sh "kubectl get pods"
    }
    
	}
