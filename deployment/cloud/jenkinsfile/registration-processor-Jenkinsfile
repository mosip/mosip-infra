node {
 try{
 def server = Artifactory.server 'ART'
 def rtMaven = Artifactory.newMavenBuild()
 def buildInfo
 def branch = params.BRANCH_NAME
 projectToBuild = 'registration-processor'
 def dockerImagesTagVersion = 'NaV'  //This will ensure that docker images tag should have 1-1 relation ship with project version
 def registryUrl = params.REGISTRY_URL
 def registryName = params.REGISTRY_NAME
 def registryCredentials = params.REGISTRY_CREDENTIALS
 def gitUrl = params.GIT_URL
 def gitCredentials = params.GIT_CREDENTIALS
 k8Context = params.K8_CLUSTER_CONTEXT
 updatedServicesForDmz = []
 updatedDockerImagesForDmz = []
 updatedServicesForPrivateZone = []
 updatedDockerImagesForPrivateZone= []
 // k8DevContextForPrivateZone = 'mosip-dev-cluster'
 def dmz_reg_proc_dev_ip=params.DMZ_REG_PROC_DEV_IP
 def config_url=params.CONFIG_URL
 def profile_env=params.CONFIGURATION_PROFILE
 def registryAddress=params.REGISTRY_NAME

 stage('------- Checkout --------') {
  // Checkout only Registration-Processor Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: gitUrl, credentialsId:gitCredentials]
    ],
    extensions: [

     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild +'/.*'],
     [$class: 'CloneOption', noTags: false, reference: '', shallow: true, timeout: 120, depth: 1, refspec:"+refs/heads/"+branch+":refs/remotes/origin/"+branch],
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: '/'+projectToBuild + '/']
     ]]

    ],
   ])
  }
 }

 stage('--------- Artifactory configuration ----------------') {
  rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
  rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
  rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
  buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
 }
 
stage ('---------- mvn-clean-install ---------------') {
	//rtMaven.deployer.deployArtifacts = false
        rtMaven.run pom: branch + '/' + projectToBuild + '/pom.xml', goals: 'clean install', buildInfo: buildInfo
}

stage('---------- SonarQube Analysis --------------') {
  def mvnHome = tool name: 'M2_HOME', type: 'maven'
  withSonarQubeEnv('sonar') {
   sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild/' sonar:sonar"
  }
 }

stage('----------- Publish build info -------------') {
  server.publishBuildInfo buildInfo
 }
 
 stage('------ Docker Images : Push & Cleanup -------') {
  /*
   Building Docker images of the services which have to be run inside a Docker Container and pushing the
   images to Docker Registry.
   This stage will build either all the Services (modules) present or only modules that have been changed
   since last build according to the build parameter provided.
  */
  dir(branch) {
	/*
	finding parent pom version to create Docker tags
	*/
   pomFile = readMavenPom file: projectToBuild+'/pom.xml'
   dockerImagesTagVersion = pomFile.parent.version
   echo dockerImagesTagVersion
 
   /*
     Checking if there is any Dockerfile present to build, if not, returning from this stage
   */
   sh "find . -name 'Dockerfile'> testdirectoryDockerFiles"
   testlocationOfDockerFiles = readFile("testdirectoryDockerFiles").split("\\r?\\n");
   sh "rm -f testdirectoryDockerFiles"
   if (testlocationOfDockerFiles[0].equals("")) {
      echo "tested:::: no docker files present, returning"
      return;
     }
   /*
   Finding location of all the Dockerfiles present in module
   */
   sh "dirname `find . -name 'Dockerfile'`> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   /*
   If build paramerter is passed as Build All (All submodules have to be built)
   */
   if ("${env.BUIILD_OPTION}" == "Build All") {
    echo "BUILD_OPTION is set to Build All."
    echo "Building all submodules."
    for (int i = 0; i < locationOfDockerFiles.size(); i++) {
     if (locationOfDockerFiles[i].equals("")) {
      break;
     }
     def currentModule = locationOfDockerFiles[i]
     /*
     Getting name of the module to be built
     */
     sh "basename $currentModule > moduleName"
     moduleName = readFile('moduleName').trim()
     sh "rm -f moduleName"
     /*
     Getting path of the module to be built
     */
     modulePath = locationOfDockerFiles[i].substring(2);

     /**
     Finding out the parent directory of modules to deploy services accordingly.
     **/
     sh "dirname $currentModule > parentDirectory"
     def parentDirectory = readFile('parentDirectory').trim()
     parentDirectory = parentDirectory.substring(2);
     /*
     If Services are present in init directory, they have to be deployed in DM Zone
     */
     if(parentDirectory == 'registration-processor/init'){
         updatedServicesForDmz.add(moduleName)
         updatedDockerImagesForDmz.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }
     /*
     If Services are present in pre-processor, post-processor or core-processor directory, they have to be deployed in Private Zone
     */
     else if ((parentDirectory == 'registration-processor/core-processor') || (parentDirectory == 'registration-processor/pre-processor') ||(parentDirectory == 'registration-processor/post-processor')){
         updatedServicesForPrivateZone.add(moduleName)
         updatedDockerImagesForPrivateZone.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }
     /*
     If Services are present in root path in registartion-processor module and starts with 'registartion-processor-common', they have to be deployed in both private and DM Zones.
     */
     else if (parentDirectory == 'registration-processor' && moduleName.startsWith('registartion-processor-common')) 
     {
          updatedServicesForDmz.add(moduleName)
          updatedDockerImagesForDmz.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
          updatedServicesForPrivateZone.add(moduleName)
          updatedDockerImagesForPrivateZone.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }

     echo moduleName + " will be built"
     /*
     Pushing the module image with tag as version.buildnumber and tag as latest to docker registry
     */
     docker.withRegistry(registryUrl, registryCredentials) {
      def buildName = moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER"
      newApp = docker.build(buildName, '-f ' + currentModule + "/Dockerfile" + ' ' + modulePath)
      newApp.push()
      newApp.push 'latest'
     }
     /*
     Removing local images
     */
     sh "docker rmi $moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     sh "docker rmi $registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     sh "docker rmi $registryName/$moduleName"
    }
   } 
   else {
    /*
     If build paramerter is passed as Build Changes (Only changed submodules have to be built)
    */   
    echo "BUILD_OPTION is set to Build Changed."
    echo "Building only changed submodules."
    changedModulesLocation = getChangedModulesPaths();
    for (int i = 0; i < changedModulesLocation.size(); i++) {
     def currentModule = changedModulesLocation[i]
     /*
     Getting name of the module to be built
     */
     sh "basename $currentModule > moduleName"
     moduleName = readFile('moduleName').trim()
     sh "rm -f moduleName"
     /*
     Getting path of the module to be built
     */
     modulePath = changedModulesLocation[i].substring(2);
      /**
     Finding out the parent directory of modules to deploy services accordingly.
     **/
     sh "dirname $currentModule > parentDirectory"
     def parentDirectory = readFile('parentDirectory').trim()
     parentDirectory = parentDirectory.substring(2);
     /*
     If Services are present in init directory, they have to be deployed in DM Zone
     */
     if(parentDirectory == 'registration-processor/init'){
        updatedServicesForDmz.add(moduleName)
        updatedDockerImagesForDmz.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }
     /*
     If Services are present in pre-processor, post-processor or core-processor directory, they have to be deployed in Private Zone
     */
     else if ((parentDirectory == 'registration-processor/core-processor') || (parentDirectory == 'registration-processor/pre-processor') ||(parentDirectory == 'registration-processor/post-processor')){
         updatedServicesForPrivateZone.add(moduleName)
         updatedDockerImagesForPrivateZone.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }
     /*
     If Services are present in root path in module and starts with 'registartion-processor-common', they have to be deployed in both private and DM Zones.
     */
     else if (parentDirectory == 'registration-processor' && moduleName.startsWith('registartion-processor-common')) 
     {
        updatedServicesForDmz.add(moduleName)
        updatedDockerImagesForDmz.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
        updatedServicesForPrivateZone.add(moduleName)
        updatedDockerImagesForPrivateZone.add(registryName + '/' + moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER")
     }
     echo moduleName + " will be built"
     /*
     Pushing the module image with tag as version.buildnumber and tag as latest to docker registry
     */
     docker.withRegistry(registryUrl, registryCredentials) {
      def buildName = moduleName + ":$dockerImagesTagVersion.$BUILD_NUMBER"
      newApp = docker.build(buildName, '-f ' + currentModule + "/Dockerfile" + ' ' + modulePath)
      newApp.push()
      newApp.push 'latest'
     }
     /*
     Removing local images
     */
     sh "docker rmi $moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     sh "docker rmi $registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     sh "docker rmi $registryName/$moduleName"
    }
   }

    /*
     Removing all untagged images
     */
    sh "docker rmi \$(docker images | awk '/<none>/ {print \$3}') || true"

  }

 }


/**TBD - Deploy - DM Zone Services - in K8**/



stage('Deploy - Private Zone Services - in K8'){
      //this stage will rollout the changes on Kubernetes Cluster
      sh "kubectl config use-context $k8Context"
      for(int i = 0; i<updatedDockerImagesForPrivateZone.size(); i++){
        def updatedDockerImage = updatedDockerImagesForPrivateZone[i]
        def updatedService = updatedServicesForPrivateZone[i]
        echo "Updating [ Service:$updatedService, Image:$updatedDockerImage ]"
        sh "kubectl set image deployment/$updatedService $updatedService=$updatedDockerImage"
      }
      echo "Getting list of all services" 
      sh "kubectl get pods"
    }
    
    stage('DMZ_Deployment'){
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: registryCredentials,
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def label_env=env.NEXT_BRANCH_NAME
sh """ssh  madmin@"${dmz_reg_proc_dev_ip}" /bin/bash << EOF
docker login -u "${USERNAME}" -p "${PASSWORD}"  docker-registry.mosip.io:5000 
docker ps -aq | xargs docker stop | xargs docker rm
docker images -q | xargs docker rmi
echo "Echoing label_env"
echo "${label_env}"
docker run --restart always -it -d -p 8083:8083 -e active_profile_env="${profile_env}" -e spring_config_label_env="${label_env}" -e spring_config_url_env="${config_url}" "${registryAddress}"/registration-processor-registration-status-service
docker run --restart always -it -d -p 8082:8082 -e active_profile_env="${profile_env}" -e spring_config_label_env="${label_env}" -e spring_config_url_env="${config_url}" "${registryAddress}"/registration-processor-packet-generator-service
docker run --restart always -it -d --network host --privileged=true -v /home/ftp1/LANDING_ZONE:/home/ftp1/LANDING_ZONE -v /home/ftp1/ARCHIVE_PACKET_LOCATION:/home/ftp1/ARCHIVE_PACKET_LOCATION -e active_profile_env="${profile_env}" -e spring_config_label_env="${label_env}" -e spring_config_url_env="${config_url}" "${registryAddress}"/registration-processor-packet-receiver-stage
docker run --restart always -it -d --network host --privileged=true -e active_profile_env="${profile_env}" -e spring_config_label_env="${label_env}" -e spring_config_url_env="${config_url}" -e zone_env=dmz  "${registryAddress}"/registration-processor-common-camel-bridge
EOF"""
    }
  }
    
	}
	   // Catching the exception for triggering email
  catch (exception) {
        print exception
		// If the job was aborted by any user
        if (exception instanceof InterruptedException) {
           currentBuild.result = "ABORTED"
        }
		// If the job failed due to some error
        else{
            currentBuild.result = "FAILURE"
        }
        
        throw exception //rethrow exception to prevent the build from proceeding
    
        
        }
	finally{
		if(currentBuild.result == "FAILURE"){
		// sending email to kernel recipients
		recipients = "$env.REGISTRATION_PROCESSOR_RECIPIENT_LIST"
		emailext (
					subject: "MOSIP Jenkins Job $JOB_NAME with build no $BUILD_NUMBER failed'",
					body: """<p>Check console output at <a href="$BUILD_URL">'${JOB_NAME}'</a></p>""",
					to: "$recipients",
					from: '"Jenkins" <info@mosip.io>'
				)
	}
	}

}

/*This function will return paths all the Submodules which have been changed and 
 which will be deployed as a service*/
@NonCPS
def getChangedModulesPaths() {
 Set modifiedModulePaths = [] as TreeSet

 /*
 ChangeSets until last build
 */
 def changeLogSets = currentBuild.changeSets

 /*
 A treeSet to store paths of all the files that have been changed until last build
 */
 Set affectedPaths = [] as TreeSet
 for (int i = 0; i < changeLogSets.size(); i++) {
  def entries = changeLogSets[i].items 
  for (int j = 0; j < entries.length; j++) {
   def entry = entries[j]
   echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
   affectedPaths.addAll(entry.affectedPaths);
   }
  }
  /*
  Filtering all the modules from affected path that do not belong to project to build
  */
  echo "affected paths are :" + affectedPaths
  affectedPaths.retainAll{it.startsWith(projectToBuild)}
  echo "affected paths after retaining only kernel modules are --------:" + affectedPaths
for (int i = 0; i < locationOfDockerFiles.size(); i++) {
        /*
        If there is no Dockerfile present in the Services
        */
        if(locationOfDockerFiles[i].equals("")){
        	break;
        }
	/*
        Checking if the paths affected belong to modules that have to be deployed
        */
		if(affectedPaths.any{it.startsWith(locationOfDockerFiles[i].substring(2))}){
			modifiedModulePaths.add(locationOfDockerFiles[i])
            /*
            Removing affected paths that belong to same module (Because we have already taken
            into consideration this module)
            */
			affectedPaths.removeAll{it.startsWith(locationOfDockerFiles[i].substring(2))}
		}
		
		
	
  }
	echo "paths of modules to be built ::::::::::::>" + modifiedModulePaths
 	return modifiedModulePaths
}
