import jenkins.model.*
import jenkins.plugins.publish_over_ssh.BapSshHostConfiguration

def inst = Jenkins.getInstance()
def publish_ssh = inst.getDescriptor('jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin')


println "############################################################################################################"
println "PublishOverSsh - Adding dmz vm to host configurations of publish over ssh plugin"
println "############################################################################################################"


/* Serverlist
 The following has to be set.
  name,hostname,username,encryptedPassword,remoteRootDir,port,timeout,overrideKey,keyPath,key,disableExec
*/
def hosts = [
        ["{{ env_name }}DmzDeploymentServer","{{ hostvars['localhost']['output_private_ip_dmz_' + env_name] | json_query('stdout')}}","{{ global_username }}","","",22,30000,true,'','''{{ hostvars["localhost"]["private_key_content_dmz_" + env_name]}}''',false]
]

println 'Renewing Global Publish-Over-SSH-Server Configs'

hosts.each { host->
  def configuration = new BapSshHostConfiguration(host[0],host[1],host[2],host[3],host[4],host[5],host[6],host[7],host[8],host[9],host[10])
  println " - SSH-Host ${host[0]}"
  configuration.setJumpHost("{{ hostvars['localhost']['output_domain_name_proxy_server_' + env_name] | json_query('stdout')}}")
  publish_ssh.removeHostConfiguration(host[0])
  publish_ssh.addHostConfiguration(configuration)
}
